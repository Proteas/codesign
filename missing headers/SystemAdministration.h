//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import <Cocoa/Cocoa.h>

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown


#pragma mark Typedef'd Structures

typedef struct {
    unsigned int _field1;
    unsigned int _field2;
    char _field3[1];
} CDStruct_7d936526;

typedef struct {
    unsigned int _field1;
    void * _field2;
} CDStruct_166d2db6;

#pragma mark -

//
// File: /System/Library/PrivateFrameworks/SystemAdministration.framework/Versions/A/SystemAdministration
// UUID: 6FD03EF6-32B6-397D-B9D7-D68E89A462F5
//
//                           Arch: x86_64
//                Current version: 1.0.0
//          Compatibility version: 1.0.0
//                 Source version: 594.1.0.0.0
//       Minimum Mac OS X version: 10.9.0
//                    SDK version: 10.9.0
//
// Objective-C Garbage Collection: Supported
//

@protocol ADM_NVRAMConfigProtocol
- (void)lookForNetBootServersAndReportTo:(id)arg1;
@end

@protocol DOAsyncResultProtocol
- (oneway void)setDoneWithResult:(long long)arg1;
@end

@protocol FilesFinderWriteConfigSync

@optional
- (oneway void)setCopyPermissionsForNodeAtPath:(NSString *)arg1 authorization:(NSData *)arg2 result:(void (^)(long long))arg3;
- (oneway void)asyncSecurelyRemoveFileAtPath:(NSString *)arg1 withOptions:(unsigned long long)arg2 authorization:(NSData *)arg3 result:(void (^)(long long))arg4;
- (oneway void)asyncRemoveFileAtPath:(NSString *)arg1 authorization:(NSData *)arg2 result:(void (^)(long long))arg3;
- (oneway void)createDiskImage:(NSString *)arg1 fromPath:(NSString *)arg2 asUID:(long long)arg3 authorization:(NSData *)arg4 result:(void (^)(long long))arg5;
- (oneway void)directorySizeAtPath:(NSString *)arg1 authorization:(NSData *)arg2 result:(void (^)(unsigned long long))arg3;
- (oneway void)createHomeDirectory:(NSDictionary *)arg1 authorization:(NSData *)arg2 result:(void (^)(long long))arg3;
@end

@protocol GroupsWriteConfigSync

@optional
- (oneway void)addMember:(NSString *)arg1 isGroup:(BOOL)arg2 toGroupName:(NSString *)arg3 authorization:(NSData *)arg4 reply:(void (^)(NSError *))arg5;
- (oneway void)setGroupName:(NSString *)arg1 newName:(NSString *)arg2 authorization:(NSData *)arg3 reply:(void (^)(NSError *))arg4;
- (oneway void)removeMemberUUID:(NSString *)arg1 fromGroupNamed:(NSString *)arg2 authorization:(NSData *)arg3 reply:(void (^)(NSError *))arg4;
- (oneway void)removeMember:(NSString *)arg1 isGroup:(BOOL)arg2 fromGroupNamed:(NSString *)arg3 authorization:(NSData *)arg4 reply:(void (^)(NSError *))arg5;
- (oneway void)createGroupWithName:(NSString *)arg1 realName:(NSString *)arg2 gid:(long long)arg3 authorization:(NSData *)arg4 reply:(void (^)(NSError *))arg5;
@end

@protocol KeyChainWriteConfigSync

@optional
- (oneway void)storeSystemKeychainPassword:(NSString *)arg1 account:(NSString *)arg2 service:(NSString *)arg3 authorization:(NSData *)arg4 result:(void (^)(BOOL))arg5;
- (oneway void)storeKeyInSystemKeychain:(NSString *)arg1 forUser:(NSString *)arg2 serverURL:(NSURL *)arg3 description:(NSString *)arg4 authorization:(NSData *)arg5 result:(void (^)(int))arg6;
@end

@protocol ReadConfigProtocol <ADM_NVRAMConfigProtocol>
- (oneway void)quit;
@end

@protocol SharingWriteConfigSync

@optional
- (oneway void)requestNumberOfClientsForProtocols:(NSArray *)arg1 authorization:(NSData *)arg2 result:(void (^)(int, unsigned int))arg3;
- (oneway void)setGuestForProtocol:(NSArray *)arg1 enabled:(BOOL)arg2 authorization:(NSData *)arg3 result:(void (^)(int))arg4;
- (oneway void)setNSCProtocolEnabled:(NSArray *)arg1 enabled:(BOOL)arg2 authorization:(NSData *)arg3 result:(void (^)(int))arg4;
- (oneway void)nscServerCancelShutdown:(NSString *)arg1 refNum:(unsigned int)arg2 authorization:(NSData *)arg3 result:(void (^)(int))arg4;
- (oneway void)nscServerShutdown:(NSString *)arg1 withDelay:(int)arg2 authorization:(NSData *)arg3 result:(void (^)(int, unsigned int))arg4;
- (oneway void)setInetDServiceEnabled:(NSString *)arg1 enabled:(BOOL)arg2 authorization:(NSData *)arg3 result:(void (^)(BOOL))arg4;
@end

@protocol UsersWriteConfigSync

@optional
- (oneway void)FDERevertRequiresRestart:(NSString *)arg1 authorization:(NSData *)arg2 result:(void (^)(BOOL))arg3;
- (oneway void)changeFVPassword:(NSString *)arg1 masterPassword:(NSString *)arg2 diskImagePath:(NSString *)arg3 authorization:(NSData *)arg4 result:(void (^)(int))arg5;
- (oneway void)changeMasterPassword:(NSString *)arg1 oldPassword:(NSString *)arg2 authorization:(NSData *)arg3 result:(void (^)(int))arg4;
@end

@protocol XPCWriteConfigSync <UsersWriteConfigSync, GroupsWriteConfigSync, KeyChainWriteConfigSync, FilesFinderWriteConfigSync, SharingWriteConfigSync>

@optional
- (oneway void)setNAPrivs:(NSString *)arg1 forUserWithName:(NSString *)arg2 authorization:(NSData *)arg3 result:(void (^)(NSError *))arg4;
- (oneway void)setMachinePreferencesForDomain:(NSString *)arg1 authorization:(NSData *)arg2 result:(void (^)(BOOL))arg3;
- (oneway void)setMachineData:(NSData *)arg1 forKey:(NSString *)arg2 inDomain:(NSString *)arg3 authorization:(NSData *)arg4 result:(void (^)(BOOL))arg5;
- (oneway void)setMachineBOOLValue:(BOOL)arg1 forKey:(NSString *)arg2 inDomain:(NSString *)arg3 authorization:(NSData *)arg4 result:(void (^)(BOOL))arg5;
- (oneway void)setMachineIntValue:(long long)arg1 forKey:(NSString *)arg2 inDomain:(NSString *)arg3 authorization:(NSData *)arg4 result:(void (^)(BOOL))arg5;
- (oneway void)setMachineArray:(NSArray *)arg1 forKey:(NSString *)arg2 inDomain:(NSString *)arg3 authorization:(NSData *)arg4 result:(void (^)(BOOL))arg5;
- (oneway void)setMachineDictionary:(NSDictionary *)arg1 forKey:(NSString *)arg2 inDomain:(NSString *)arg3 authorization:(NSData *)arg4 result:(void (^)(BOOL))arg5;
- (oneway void)setMachineString:(NSString *)arg1 forKey:(NSString *)arg2 inDomain:(NSString *)arg3 authorization:(NSData *)arg4 result:(void (^)(BOOL))arg5;
- (oneway void)wakeupWithAuthorization:(NSData *)arg1 reply:(void (^)(NSError *))arg2;
@end

@protocol XPCWriteConfigProtocol <XPCWriteConfigSync>

@optional
- (oneway void)setOwner:(NSString *)arg1 group:(NSString *)arg2 forDirectory:(NSString *)arg3 _withAuthorization:(NSData *)arg4;
- (oneway void)createPath:(NSString *)arg1 attributes:(NSDictionary *)arg2 _withAuthorization:(NSData *)arg3;
- (oneway void)movePath:(NSString *)arg1 toPath:(NSString *)arg2 _withAuthorization:(NSData *)arg3;
- (oneway void)removeFileAtPath:(NSString *)arg1 _withAuthorization:(NSData *)arg2;
- (oneway void)createFileWithContents:(NSData *)arg1 path:(NSString *)arg2 attributes:(NSDictionary *)arg3 _withAuthorization:(NSData *)arg4;
- (oneway void)setGuestPassword:(NSString *)arg1 accountName:(NSString *)arg2 _withAuthorization:(NSData *)arg3;
- (oneway void)setODSDPassword:(NSString *)arg1 accountName:(NSString *)arg2 _withAuthorization:(NSData *)arg3;
- (oneway void)overwriteGatekeeperForURL:(NSURL *)arg1 _withAuthorization:(NSData *)arg2;
- (oneway void)setKeyForDomain:(NSDictionary *)arg1 _withAuthorization:(NSData *)arg2;
- (oneway void)setRestrictAppInstallations:(BOOL)arg1 allowCaspianIdentifiedApps:(BOOL)arg2 _withAuthorization:(NSData *)arg3;
- (oneway void)suspendPerUserLaunchd:(unsigned long long)arg1 suspend:(BOOL)arg2 _withAuthorization:(NSData *)arg3;
- (oneway void)touchEFIResourceBuilder_withAuthorization:(NSData *)arg1;
- (oneway void)resetFDERecoveryPassword:(NSString *)arg1 existing:(NSString *)arg2 new:(NSString *)arg3 _withAuthorization:(NSData *)arg4;
- (oneway void)setMasterPassword:(NSString *)arg1 _withAuthorization:(NSData *)arg2;
- (oneway void)setStartupFromNetBootImage:(NSDictionary *)arg1 reportSuccessTo:(id)arg2 _withAuthorization:(NSData *)arg3;
- (oneway void)setStartupFromNetBootImage:(NSDictionary *)arg1 _withAuthorization:(NSData *)arg2;
- (oneway void)issueNVRAMCommand:(NSArray *)arg1 _withAuthorization:(NSData *)arg2;
- (oneway void)writeVNCPassword:(NSString *)arg1 _withAuthorization:(NSData *)arg2;
- (oneway void)setARDEnabled:(BOOL)arg1 _withAuthorization:(NSData *)arg2;
- (oneway void)scSaveNatPrefs:(NSDictionary *)arg1 _withAuthorization:(NSData *)arg2;
- (oneway void)setPrinterSharingEnabled:(BOOL)arg1 _withAuthorization:(NSData *)arg2;
- (oneway void)scWriteDomains:(NSArray *)arg1 forKey:(NSString *)arg2 _withAuthorization:(NSData *)arg3;
- (oneway void)scSetZeroConfName:(NSString *)arg1 _withAuthorization:(NSData *)arg2;
- (oneway void)scSetComputerName:(NSString *)arg1 _withAuthorization:(NSData *)arg2;
- (oneway void)setCRAutoSubmitEnabled:(BOOL)arg1 _withAuthorization:(NSData *)arg2;
- (oneway void)sendSIGHUPToProcess:(NSString *)arg1 _withAuthorization:(NSData *)arg2;
- (oneway void)setFMMGoodSamaritanMessage:(NSString *)arg1 _withAuthorization:(NSData *)arg2;
- (oneway void)setRemoteListening:(BOOL)arg1 _withAuthorization:(NSData *)arg2;
- (oneway void)updateDSAppsForUser:(NSString *)arg1 bundleIDs:(NSArray *)arg2 kickMCX:(BOOL)arg3 _withAuthorization:(NSData *)arg4;
- (oneway void)launchFibreConfig:(NSArray *)arg1 _withAuthorization:(NSData *)arg2;
- (oneway void)kickMCXDForUID:(long long)arg1 _withAuthorization:(NSData *)arg2;
- (oneway void)killProcessID:(int)arg1 withSignal:(int)arg2 _withAuthorization:(NSData *)arg3;
- (oneway void)scheduleRepeatingPowerEvent:(NSDictionary *)arg1 _withAuthorization:(NSData *)arg2;
- (oneway void)cancelAllRepeatingPowerEvents_withAuthorization:(NSData *)arg1;
- (oneway void)writePowerManagerUPSSettings:(NSDictionary *)arg1 forKey:(NSString *)arg2 _withAuthorization:(NSData *)arg3;
- (oneway void)writePowerManagerActivityProfile:(NSDictionary *)arg1 _withAuthorization:(NSData *)arg2;
- (oneway void)setXServeLockEnclosureState:(BOOL)arg1 _withAuthorization:(NSData *)arg2;
- (oneway void)setLockSecurePrefs:(BOOL)arg1 authStrings:(NSArray *)arg2 _withAuthorization:(NSData *)arg3;
- (oneway void)setTime:(long long)arg1 _withAuthorization:(NSData *)arg2;
- (oneway void)setTimeZone:(NSString *)arg1 _withAuthorization:(NSData *)arg2;
- (oneway void)setNTPServers:(NSArray *)arg1 _withAuthorization:(NSData *)arg2;
- (oneway void)wakeup_withAuthorization:(NSData *)arg1;
@end

@interface ADMHostConfig : NSObject
{
}

+ (id)hostConfigForSystemFile;
- (void)setZeroConfName:(id)arg1;
- (BOOL)setComputerName:(id)arg1;

@end

@interface ADMNetworkTimeClient : NSObject
{
}

+ (id)sharedNetworkTimeClient;
- (BOOL)synchronizeNow;
- (void)restartAsync;
- (BOOL)isServing;
- (BOOL)isSyncing;
- (void)setLaunchAtStartup:(BOOL)arg1;
- (void)stopSyncing;
- (void)startSyncing;
- (void)restart;
- (void)stop;
- (void)start;
- (void)setServer:(id)arg1;
- (id)server;
- (id)servers;
- (void)setServers:(id)arg1;
- (void)stopWithAuthorization:(struct AuthorizationOpaqueRef *)arg1;
- (void)startWithAuthorization:(struct AuthorizationOpaqueRef *)arg1;
- (void)_ntpSetEnabled:(unsigned char)arg1;
- (BOOL)isRunning;

@end

@interface ADMNetworkTimeServer : NSObject
{
    NSString *_descriptiveName;
    NSString *_address;
}

+ (id)serverWithConfigurationString:(id)arg1;
- (id)configurationString;
- (id)address;
- (id)descriptiveName;
- (void)setAddress:(id)arg1;
- (id)description;
- (void)setDescriptiveName:(id)arg1;
- (id)initWithConfigurationString:(id)arg1;
- (void)dealloc;

@end

@interface ADMSystemClock : NSObject
{
}

+ (id)sharedSystemClock;
- (void)setTime:(long long)arg1;
- (void)setTimeZone:(id)arg1;

@end

@interface ADMWebServerConfig : NSObject
{
    NSString *_configurationDirectory;
}

+ (id)sharedRemoteAdminServerConfig;
+ (id)sharedWebServerConfig;
- (id)webServerName;
- (BOOL)isValidServerName:(id)arg1;
- (BOOL)isWebServerRunning;
- (void)restartWebServer;
- (void)stopWebServer;
- (void)startWebServer;
- (void)dealloc;
- (id)initWithConfigurationDirectory:(id)arg1;

@end

@interface AdminDirectoryService : NSObject
{
    unsigned int mDirReference;
    NSString *mNameOfDefaultLocalNode;
    NSString *mNameOfSearchNode;
}

+ (unsigned int)sharedSession;
+ (id)sharedDirectoryService;
+ (unsigned int)dirReferenceForServiceAtAddress:(id)arg1 name:(id)arg2 password:(id)arg3 port:(long long)arg4;
+ (id)directoryServiceAtAddress:(id)arg1 name:(id)arg2 password:(id)arg3 port:(long long)arg4;
- (id)namesOfNodeWithName:(CDStruct_7d936526 *)arg1 patternMatch:(int)arg2;
- (id)nameOfNodeWithName:(CDStruct_7d936526 *)arg1 patternMatch:(int)arg2;
- (id)nameOfSearchNode;
- (id)nameOfDefaultLocalNode;
- (void)close;
- (unsigned int)session;
- (BOOL)isOpen;
- (void)open;
- (void)finalize;
- (void)dealloc;
- (id)initWithDirectoryServiceAtAddress:(id)arg1 name:(id)arg2 password:(id)arg3 port:(long long)arg4;

@end

@interface ADMDSNode : NSObject
{
    unsigned int mNodeReference;
    NSString *mNodeName;
    AdminDirectoryService *mDirectoryService;
    struct dispatch_semaphore_s *mOpenCloseSemaphore;
}

+ (BOOL)isConnectedToNetwork;
+ (id)openSearchNode;
+ (BOOL)nodeIsDefaultLocalNode:(unsigned int)arg1;
+ (id)openProxyNodeAtAddress:(id)arg1 name:(id)arg2 password:(id)arg3 port:(long long)arg4;
+ (void)closeDefaultLocalNode;
+ (id)openDefaultLocalNode;
+ (id)nodeWithName:(id)arg1;
- (void)setDirectoryService:(id)arg1;
- (id)directoryService;
- (unsigned int)dirNodeReference;
- (id)findRecordByID:(long long)arg1 type:(CDStruct_166d2db6 *)arg2 attribute:(CDStruct_7d936526 *)arg3;
- (id)findRecordsByID:(long long)arg1 type:(CDStruct_166d2db6 *)arg2 attribute:(CDStruct_7d936526 *)arg3;
- (id)findRecordWithName:(CDStruct_166d2db6 *)arg1 type:(CDStruct_166d2db6 *)arg2 attribute:(CDStruct_166d2db6 *)arg3;
- (id)findRecordsWithName:(CDStruct_166d2db6 *)arg1 type:(CDStruct_166d2db6 *)arg2 attribute:(CDStruct_166d2db6 *)arg3;
- (id)findUserWithFullName:(CDStruct_7d936526 *)arg1 attribute:(CDStruct_166d2db6 *)arg2;
- (id)findUsersWithFullName:(CDStruct_7d936526 *)arg1 attribute:(CDStruct_166d2db6 *)arg2;
- (BOOL)isNetInfoNode;
- (void)close;
- (BOOL)isOpen;
- (BOOL)open;
- (id)hashedPasswordForUser:(id)arg1;
- (BOOL)setHashedPassword:(id)arg1 forUser:(id)arg2;
- (long long)setPasswordAsRoot:(id)arg1 forUser:(id)arg2;
- (BOOL)setPasswordScheme:(const char *)arg1 forUser:(id)arg2 password:(id)arg3;
- (long long)setPassword:(id)arg1 oldPassword:(id)arg2 forUser:(id)arg3;
- (void)deauthenticate;
- (BOOL)authenticateNodeWithAuthorization:(id)arg1;
- (int)authenticateName:(id)arg1 withPassword:(id)arg2;
- (int)verifyUserName:(id)arg1 password:(id)arg2;
- (id)replacementObjectForPortCoder:(id)arg1;
- (id)nodeName;
- (void)finalize;
- (void)dealloc;
- (id)initWithNodeName:(id)arg1;
- (id)_findRecordsByID:(long long)arg1 type:(CDStruct_166d2db6 *)arg2 attribute:(CDStruct_7d936526 *)arg3 expectedCount:(unsigned int)arg4;
- (id)_findRecordsWithName:(CDStruct_166d2db6 *)arg1 type:(CDStruct_166d2db6 *)arg2 attribute:(CDStruct_166d2db6 *)arg3 expectedCount:(unsigned int)arg4;
- (id)_findUsersWithFullName:(CDStruct_7d936526 *)arg1 attribute:(CDStruct_166d2db6 *)arg2 expectedCount:(unsigned int)arg3;
- (int)_authenticateNodeWithName:(id)arg1 password:(id)arg2 oldPassword:(id)arg3 data:(id)arg4 method:(const char *)arg5 doAuthentication:(BOOL)arg6;
- (id)_recordsFromBuffer:(CDStruct_7d936526 *)arg1 count:(unsigned int)arg2;

@end


@interface ADMDSRecord : NSObject
{
    unsigned int mRecordReference;
    NSString *mRecordName;
    NSString *mRecordType;
    ADMDSNode *mNode;
}

+ (long long)nextFreeIDInRange:(struct _NSRange)arg1;
- (BOOL)deleteRecord;
- (BOOL)createRecordInNode:(id)arg1 withAttributes:(id)arg2;
- (BOOL)createRecordWithAttributes:(id)arg1;
- (BOOL)createRecord;
- (BOOL)removeValueID:(unsigned int)arg1 fromAttributeType:(id)arg2;
- (BOOL)removeValue:(id)arg1 fromAttributeType:(id)arg2;
- (BOOL)removeAttribute:(id)arg1;
- (BOOL)setValue:(id)arg1 withValueID:(unsigned int)arg2 forAttributeType:(id)arg3;
- (BOOL)addValue:(id)arg1 toAttributeType:(id)arg2;
- (BOOL)addAttribute:(id)arg1 value:(id)arg2;
- (BOOL)setRecordNameTo:(id)arg1;
- (id)attributesForTypes:(id)arg1;
- (id)attributeForType:(id)arg1 fullInfo:(BOOL)arg2;
- (id)node;
- (id)name;
- (void)close;
- (BOOL)isOpen;
- (BOOL)open;
- (id)replacementObjectForPortCoder:(id)arg1;
- (id)description;
- (void)finalize;
- (void)dealloc;
- (id)initWithRecordName:(const char *)arg1 type:(const char *)arg2 node:(id)arg3;
- (id)initWithRecordName:(const char *)arg1 type:(const char *)arg2;
- (id)initWithRecord:(id)arg1;
- (BOOL)_setValue:(id)arg1 forKey:(id)arg2;
- (void)_cleanUpDeletedRecord;
- (id)generatedUID;

@end

@interface ADMUser : ADMDSRecord
{
    NSMutableDictionary *mCache;
    NSMutableArray *mModifiedFields;
    NSString *mCachedName;
    NSString *mCachedPassword;
    NSNumber *mIsLocal;
    struct __CSIdentity *mIdentityRef;
}

+ (BOOL)shouldHide500Users;
+ (BOOL)shouldDisplayUser:(id)arg1;
+ (BOOL)removeHomeFolderOfUser:(id)arg1 async:(BOOL)arg2 delegate:(id)arg3;
+ (BOOL)removeHomeFolderOfUser:(id)arg1;
+ (BOOL)isUnixNameValid:(id)arg1;
+ (id)generateUnixNameUsingString:(id)arg1;
+ (id)suggestUnixNameUsingString:(id)arg1;
+ (BOOL)hasRootPasswordBeingSet;
+ (BOOL)isCurrentUserAdministrator;
+ (struct __CSIdentity *)currentUserCSIdentityRef;
+ (id)currentUser;
+ (id)newUser;
+ (long long)nextFreeUserID;
+ (id)allLocalUserNamesWithPrimaryGroup:(id)arg1;
+ (id)allLocalUsers;
+ (id)findUserByID:(unsigned long long)arg1 searchParent:(BOOL)arg2;
+ (id)findUserByFullName:(id)arg1 searchParent:(BOOL)arg2;
+ (id)findUserByName:(id)arg1 searchParent:(BOOL)arg2;
+ (id)extendNameUntilUnique:(id)arg1;
+ (BOOL)isUserNameUnique:(id)arg1 searchParent:(BOOL)arg2;
+ (id)defaultFamilySettings;
+ (unsigned long long)sizeOfUserHomeTemplate;
+ (id)SBSNodeName;
+ (int)changeMasterPassword:(id)arg1 oldPassword:(id)arg2;
+ (void)setMasterPassword:(id)arg1;
+ (BOOL)isMasterPasswordEnabled;
+ (BOOL)isBootVolumeCSFDE;
+ (id)_findUserName:(id)arg1 searchParent:(BOOL)arg2;
+ (CDStruct_166d2db6)_createDSListFromArray:(id)arg1;
+ (id)_userWithInfo:(id)arg1 attributes:(id)arg2;
+ (id)_findUser:(id)arg1 fullName:(BOOL)arg2 searchParent:(BOOL)arg3 attributes:(id)arg4;
+ (BOOL)_isAdministrator:(id)arg1;
- (void)setUserCanChangeDefaultLanguage:(BOOL)arg1;
- (BOOL)userCanChangeDefaultLanguage;
- (void)setDefaultLanguage:(id)arg1 immideately:(BOOL)arg2;
- (id)defaultLanguage;
- (void)setGuestUser:(BOOL)arg1;
- (BOOL)isGuestUser;
- (void)setGeneratedUID:(id)arg1;
- (id)generatedUID;
- (void)disableUser;
- (void)enableUser;
- (void)enableUserWithPassword:(id)arg1;
- (void)familySettingsDidChangeExternally;
- (void)setMCXFlags:(id)arg1;
- (BOOL)deleteMSXSettings;
- (BOOL)hasMSXSettings;
- (id)familySettings;
- (void)setFamilySettings:(id)arg1;
- (BOOL)isExternalAccount;
- (BOOL)hasMobileHomeDirectory;
- (void)setHomeloc:(id)arg1;
- (id)homeloc;
- (BOOL)isLocalCachedAccount;
- (BOOL)isTokenAuthenticationEnabled;
- (BOOL)isDisabledUser;
- (id)metaNodeLocation;
- (id)originalNodeName;
- (id)originalNFSHomeDirectory;
- (id)originalHomeDirectory;
- (void)setruid:(id)arg1;
- (id)ruid;
- (void)setNAPrivs:(id)arg1;
- (id)naprivs;
- (id)HTTPConfigFilePath;
- (BOOL)deleteHTTPConfig;
- (BOOL)createHTTPConfig;
- (long long)commitChangesReturningError;
- (BOOL)commitChanges;
- (BOOL)deleteUserWithParameters:(id)arg1;
- (BOOL)deleteUser;
- (void)revertChanges;
- (void)updatePublicFolderAliasInNI;
- (void)setAdministrator:(BOOL)arg1;
- (BOOL)isDirectAdministrator;
- (BOOL)isAdministrator;
- (void)userPictureDidChangeExternally;
- (BOOL)setPicturePathImmideately:(id)arg1;
- (BOOL)setPictureImmideately:(id)arg1;
- (void)setUserCanChangePicture:(BOOL)arg1;
- (BOOL)userCanChangePicture;
- (void)setPicture:(id)arg1;
- (void)setPicturePath:(id)arg1;
- (id)picture;
- (id)picturePath;
- (BOOL)setHintImmideately:(id)arg1;
- (void)setUserCanChangeHint:(BOOL)arg1;
- (BOOL)userCanChangeHint;
- (void)setHint:(id)arg1;
- (id)hint;
- (void)deauthenticate;
- (BOOL)authenticate:(id)arg1;
- (int)authenticateWithPassword:(id)arg1;
- (id)appleIDLoginAccount;
- (BOOL)isAppleIDLoginEnabled;
- (BOOL)setAppleIDLoginEnabled:(BOOL)arg1 appleID:(id)arg2 appleIDPassword:(id)arg3 password:(id)arg4;
- (BOOL)setAppleIDLoginEnabled:(BOOL)arg1 appleID:(id)arg2 appleIDPassword:(id)arg3;
- (BOOL)isSMBCompatible;
- (BOOL)setSMBCompatible:(BOOL)arg1 password:(id)arg2;
- (int)verifyPasswordReturnError:(id)arg1;
- (BOOL)verifyPassword:(id)arg1;
- (void)setNoLoginPassword;
- (BOOL)hasEmptyPassword;
- (long long)setPassword:(id)arg1 oldPassword:(id)arg2;
- (void)setPassword:(id)arg1;
- (BOOL)shadowPassword;
- (void)setShadowPassword:(BOOL)arg1;
- (void)setUserCanChangePassword:(BOOL)arg1;
- (BOOL)userCanChangePassword;
- (BOOL)isHomeDirInStandartPlace;
- (BOOL)createHomeDirectoryWithParameters:(id)arg1;
- (BOOL)createHomeDirectory;
- (id)defaultHomeDirectory;
- (void)setHomeDirectory:(id)arg1;
- (id)homeDirectory;
- (void)setUserCanChangeCertificate:(BOOL)arg1;
- (BOOL)userCanChangeCertificate;
- (id)userFullNameDidChangeExternally;
- (void)setUserCanChangeFullName:(BOOL)arg1;
- (BOOL)userCanChangeFullName;
- (BOOL)setFullNameImmideately:(id)arg1;
- (void)setFullName:(id)arg1;
- (id)fullName;
- (void)setShell:(id)arg1;
- (id)shell;
- (void)setGroupID:(long long)arg1;
- (long long)groupID;
- (id)groupName;
- (void)setUserID:(long long)arg1;
- (long long)userID;
- (void)setName:(id)arg1;
- (id)name;
- (BOOL)isPasswordServerEnabled;
- (BOOL)isLocal;
- (BOOL)isNewUser;
- (id)description;
- (void)dealloc;
- (id)initWithRecordName:(const char *)arg1 type:(const char *)arg2 node:(id)arg3;
- (int)unpairSBSAccountWithAuthorizationRef:(struct AuthorizationOpaqueRef *)arg1;
- (int)pairWithSBSAccount:(id)arg1 SBSPassword:(id)arg2 SBSNode:(id)arg3 password:(id)arg4 authorizationRef:(struct AuthorizationOpaqueRef *)arg5;
- (id)SBSAccountName;
- (int)resetFileVaultPassword:(id)arg1 newPassword:(id)arg2;
- (BOOL)hasAFPHomeDir;
- (id)AFPHomeDirURL;
- (BOOL)isHomeDirEncrypted;
- (void)setHomeDirEncrypted:(BOOL)arg1;
- (void)setEncryptedDiskImagePath:(id)arg1;
- (id)encryptedDiskImagePath;
- (id)defaultEncryptedDiskImagePath;
- (id)pathToProxyFile;
- (id)defaultPortableUserHomeDirectoryOnVolume:(id)arg1;
- (id)portableUserVolume;
- (void)setPortableUserVolume:(id)arg1;
- (void)setUserCanChangeLinkedIdentityName:(BOOL)arg1;
- (BOOL)userCanChangeLinkedIdentityName;
- (void)linkedIdentityNameDidChangeExternally;
- (long long)setLinkedIdentityName:(id)arg1 authorization:(id)arg2;
- (id)linkedIdentityName;
- (struct __CSIdentity *)identityRef;
- (BOOL)isIdentity;
- (long long)prvisionForFDEAuthUser:(id)arg1 authPassword:(id)arg2;
- (BOOL)canUnlockFDE;
- (void)wcSetNAPrivs:(id)arg1;
- (void)_removeAuthAuthority:(id)arg1;
- (id)_authAuthorityForString:(id)arg1;
- (BOOL)_hasAuthAuthority:(id)arg1;
- (id)_authAuthorityDictForString:(id)arg1;
- (struct __CFBundle *)_AOSFrameworkBundle;
- (void)_postDistributedNotification:(id)arg1;
- (void)_setDefaults;
- (void)_setAdministrator:(BOOL)arg1 postNotification:(BOOL)arg2;
- (void)_setUserCanChange:(BOOL)arg1 writersKey:(id)arg2;
- (BOOL)_checkWritersKey:(id)arg1;
- (id)_cachedFirstObjectForKey:(id)arg1;
- (void)_setNoneStandardAttribute:(id)arg1 value:(id)arg2;
- (id)_noneStandardAttribute:(id)arg1;
- (id)_recacheAttribute:(id)arg1;
- (void)_removeCachedAttribute:(id)arg1;
- (void)_setCachedObject:(id)arg1 forKey:(id)arg2;
- (void)_cacheAttributes:(id)arg1 forKey:(id)arg2;
- (void)_cacheUserInfo;
- (void)_setLocal:(BOOL)arg1;
- (id)_initWithInfo:(id)arg1 node:(id)arg2 attributes:(id)arg3;
- (id)_cachedObjectForKey:(id)arg1;

@end

@interface ADMGroup : ADMDSRecord
{
    NSNumber *mGUIDNumber;
    NSMutableArray *mUsers;
    NSMutableArray *mUserGUIDs;
    NSMutableArray *mNestedGUIDs;
    BOOL mGUIDChecked;
    BOOL mHasGUID;
    NSString *mUUIDString;
    NSString *mRealNameString;
}

+ (id)adminGroup;
+ (long long)nextFreeGroupIDInRange:(struct _NSRange)arg1;
+ (long long)nextFreeGroupID;
+ (id)findGroupByGUID:(struct __CFUUID *)arg1;
+ (id)findGroupByName:(id)arg1;
+ (id)findGroupByName:(id)arg1 node:(id)arg2;
+ (id)findGroupByID:(long long)arg1;
+ (id)createGroupWithName:(id)arg1 realName:(id)arg2 gid:(long long)arg3 inNode:(id)arg4;
+ (id)createGroupWithName:(id)arg1 gid:(long long)arg2 inNode:(id)arg3;
+ (id)allLocalGroups;
+ (id)wcCreateGroupWithName:(id)arg1 realName:(id)arg2;
- (void)refresh;
- (BOOL)deleteGroup;
- (id)arrayOfNestedGUIDs;
- (BOOL)hasNestedGroup:(id)arg1;
- (BOOL)removeNestedGroup:(id)arg1;
- (BOOL)addNestedGroup:(id)arg1;
- (id)arrayOfMemberGUIDs;
- (id)arrayOfMemberNames;
- (BOOL)hasMemberUUID:(id)arg1;
- (BOOL)hasMember:(id)arg1;
- (BOOL)removeMember:(id)arg1;
- (BOOL)removeMemberUUID:(id)arg1 name:(id)arg2;
- (BOOL)addMember:(id)arg1;
- (BOOL)addMemberUUID:(id)arg1 name:(id)arg2;
- (BOOL)setRealName:(id)arg1;
- (id)realName;
- (BOOL)setGeneratedUID:(id)arg1;
- (id)generatedUID;
- (BOOL)setgid:(long long)arg1;
- (long long)gid;
- (long long)setRecordNameTo:(id)arg1;
- (void)dealloc;
- (id)initWithRecordName:(const char *)arg1 type:(const char *)arg2 node:(id)arg3;
- (id)_initWithInfo:(id)arg1 node:(id)arg2;
- (void)_postDistributedNotification:(id)arg1;
- (BOOL)wcRemoveGroupMemberWithUUID:(id)arg1;
- (BOOL)wcRemoveAccountWithName:(id)arg1;
- (BOOL)wcAddAccountWithName:(id)arg1;
- (BOOL)wcRemoveNestedGroupWithName:(id)arg1;
- (BOOL)wcAddNestedGroup:(id)arg1;
- (BOOL)wcAddNestedGroupWithName:(id)arg1;
- (BOOL)wcSetGroupName:(id)arg1;
- (BOOL)wcRemoveMember:(id)arg1;

@end

@interface ADMLoginPrefs : NSObject
{
}

+ (id)sharedLoginPrefs;
- (BOOL)setFileVaultPassword:(id)arg1 oldPassword:(id)arg2;
- (void)disableFileVaultForCurrentUserWithPassword:(id)arg1;
- (void)enableFileVaultForCurrentUserWithPassword:(id)arg1;
- (BOOL)setAutomaticLoginUser:(id)arg1 uid:(long long)arg2 password:(id)arg3;
- (void)setGuestUserPassword:(id)arg1 accountName:(id)arg2;
- (void)convertFileVaultForCurrentUserWithPassword:(id)arg1;
- (BOOL)setAutomaticLoginUser:(id)arg1 password:(id)arg2;
- (id)automaticLoginUser;
- (void)setDisableRestartShutdown:(BOOL)arg1;
- (BOOL)disableRestartShutdown;
- (void)setIMEnabled:(BOOL)arg1;
- (BOOL)isIMEnabled;
- (void)setVOEnabled:(BOOL)arg1;
- (BOOL)isVOEnabled;
- (void)showList:(BOOL)arg1;
- (BOOL)showListEnabled;
- (void)showOtherUser:(BOOL)arg1;
- (BOOL)otherUserEnabled;
- (void)setShowHostname:(BOOL)arg1;
- (BOOL)showHostname;
- (void)setNumberOfRetriesBeforeHintIsDisplayed:(long long)arg1;
- (long long)numberOfRetriesBeforeHintIsDisplayed;
- (void)setLoginAuthenticator:(id)arg1;
- (id)loginAuthenticator;
- (void)syncLoginPrefs;
- (int)_setAutoLoginPassword:(id)arg1;
- (struct __CFBundle *)_loginFrameworkBundle;
- (BOOL)_boolFromCFValue:(void *)arg1;

@end

@interface UserUtilities : NSObject
{
}

+ (void)CRSetIsAutoSubmitEnabled:(BOOL)arg1;
+ (id)availableUserTemplateLocalizations;
+ (int)launchFibreConfig:(id)arg1;
+ (void)kickMCXCacher;
+ (void)setLockSecurePrefs:(BOOL)arg1 authArray:(id)arg2;
+ (void)setLockSecurePrefs:(BOOL)arg1 authString:(id)arg2;
+ (void)setXServeLockEnclosureState:(BOOL)arg1;
+ (BOOL)hasOtherConsolerUsers;
+ (void)touchEFIResourceBuilder;
+ (unsigned long long)directorySizeAtPath:(id)arg1;
+ (void)setFMMGoodSamaritanMessage:(id)arg1;
+ (void)setMachinePreferencesForDomain:(id)arg1;
+ (void)setMachineArray:(id)arg1 forKey:(id)arg2 inDomain:(id)arg3;
+ (void)setMachineDictionary:(id)arg1 forKey:(id)arg2 inDomain:(id)arg3;
+ (void)setMachineData:(id)arg1 forKey:(id)arg2 inDomain:(id)arg3;
+ (void)setMachineBOOLValue:(BOOL)arg1 forKey:(id)arg2 inDomain:(id)arg3;
+ (void)setMachineIntValue:(long long)arg1 forKey:(id)arg2 inDomain:(id)arg3;
+ (void)setMachineString:(id)arg1 forKey:(id)arg2 inDomain:(id)arg3;
+ (void)setCopyPermissionsForNodeAtPath:(id)arg1 delegate:(id)arg2;
+ (BOOL)movePath:(id)arg1 toPath:(id)arg2;
+ (void)asyncSecurelyRemoveFileAtPath:(id)arg1 withOptions:(unsigned long long)arg2 delegate:(id)arg3;
+ (BOOL)asyncRemoveFileAtPath:(id)arg1 delegate:(id)arg2;
+ (BOOL)removeFileAtPath:(id)arg1;
+ (void)createPath:(id)arg1 attributes:(id)arg2;
+ (void)createFileWithContents:(id)arg1 path:(id)arg2 attributes:(id)arg3;
+ (void)killProcessID:(int)arg1 withSignal:(int)arg2;
+ (void)setOwner:(id)arg1 group:(id)arg2 forDirectory:(id)arg3;
+ (void)setOwner:(id)arg1 forDirectory:(id)arg2;

@end

@interface ADMRemoteAEConfig : NSObject
{
}

+ (id)sharedRemoteAEConfig;
- (BOOL)hasCompatibleUserPassword;
- (BOOL)isCompatibleUserEnabled;
- (BOOL)isRemoteAppleEventsEnabled;
- (void)setRemoteAppleEventsEnabled:(BOOL)arg1;
- (id)passwordDataForString:(id)arg1;
- (BOOL)boolFromCFValueForKey:(struct __CFString *)arg1;

@end

@interface ADMPowerActivityManager : NSObject
{
    NSArray *_powerProfiles;
    NSMutableDictionary *_powerPreferences;
    NSDictionary *_activePowerProfiles;
    NSDictionary *_upsShutdownLevels;
    struct IONotificationPort *_ioNotificationPort;
    unsigned int _ioNotifier;
}

+ (id)sharedPowerActivityManager;
- (double)ratingForPowerProfile:(long long)arg1 powerSource:(id)arg2;
- (void)setActivePowerProfiles:(id)arg1;
- (void)setUPSShutdownValue:(unsigned long long)arg1 forKey:(id)arg2;
- (unsigned long long)upsShutdownValueForKey:(id)arg1;
- (void)setUPSShutdownEnabled:(BOOL)arg1 forKey:(id)arg2;
- (BOOL)upsShutdownEnabledForKey:(id)arg1;
- (BOOL)upsSupportsShutdownKey:(id)arg1;
- (BOOL)hasUPS;
- (void)refreshUPSShutdownLevels;
- (id)upsActivityProfile;
- (void)scheduleRepeatingPowerEvent:(id)arg1;
- (void)cancelAllRepeatingPowerEvents;
- (id)repeatingPowerEvents;
- (void)setRestartsOnHang:(BOOL)arg1 for:(id)arg2;
- (void)setSleepUsesDim:(BOOL)arg1 for:(id)arg2;
- (void)setLowerDisplayBrightness:(BOOL)arg1 for:(id)arg2;
- (void)setDynamicPowerStep:(BOOL)arg1 for:(id)arg2;
- (void)setReducedCPUSpeed:(BOOL)arg1 for:(id)arg2;
- (void)setAutoRestarts:(BOOL)arg1 for:(id)arg2;
- (void)setWakesOnRing:(BOOL)arg1 for:(id)arg2;
- (void)setWakesOnLAN:(BOOL)arg1 for:(id)arg2;
- (void)setEnablePowerButtonSleep:(BOOL)arg1 for:(id)arg2;
- (void)setDarkWake:(BOOL)arg1 for:(id)arg2;
- (BOOL)restartsOnHang:(id)arg1;
- (BOOL)sleepUsesDimFor:(id)arg1;
- (BOOL)lowerDisplayBrightnessFor:(id)arg1;
- (BOOL)dynamicPowerStepFor:(id)arg1;
- (BOOL)reducedCPUSpeedFor:(id)arg1;
- (BOOL)autoRestartsFor:(id)arg1;
- (BOOL)wakesOnRingFor:(id)arg1;
- (BOOL)wakesOnLANFor:(id)arg1;
- (BOOL)enablePowerButtonSleepFor:(id)arg1;
- (BOOL)darkWakeFor:(id)arg1;
- (BOOL)supportsRestartOnHangFor:(id)arg1;
- (BOOL)supportsSleepUsesDimFor:(id)arg1;
- (BOOL)supportsLowerDisplayBrightnessFor:(id)arg1;
- (BOOL)supportsDynamicPowerStep:(id)arg1;
- (BOOL)supportsReducedCPUSpeedFor:(id)arg1;
- (BOOL)supportsAutoRestartFor:(id)arg1;
- (BOOL)supportsWakeOnRingFor:(id)arg1;
- (BOOL)supportsWakeOnLANFor:(id)arg1;
- (BOOL)supportsEnablePowerButtonSleepFor:(id)arg1;
- (BOOL)supportsDarkWakeFor:(id)arg1;
- (void)setMinutesUntilSystemSleeps:(unsigned long long)arg1 for:(id)arg2;
- (void)setMinutesUntilDiskSleeps:(unsigned long long)arg1 for:(id)arg2;
- (void)setMinutesUntilDisplaySleeps:(unsigned long long)arg1 for:(id)arg2;
- (unsigned long long)systemSleeps:(id)arg1;
- (unsigned long long)diskSleeps:(id)arg1;
- (unsigned long long)displaySleepsFor:(id)arg1;
- (BOOL)hasBattery;
- (void)updateProfilesAndSendNotification;
- (void)writeUPSSettings:(id)arg1 forKey:(id)arg2;
- (id)activityProfile;
- (void)_setValue:(id)arg1 forKey:(id)arg2 powerSource:(id)arg3;
- (id)_valueForKey:(id)arg1 powerSource:(id)arg2;
- (void)_refreshActivePowerProfiles;
- (id)_activePowerProfiles;
- (void)_refreshPowerProfiles;
- (id)_powerProfiles;
- (void)_refreshPowerPreferences;
- (id)_powerPreferences;
- (void)finalize;
- (void)dealloc;
- (void)unregisterPMFeatureChangedNotification;
- (void)registerPMFeatureChangedNotification;
- (id)init;

@end

@interface ADMInternetServices : NSObject
{
}

+ (id)sharedInternetServices;
- (void)setGuestForProtocol:(id)arg1 enabled:(BOOL)arg2;
- (BOOL)isGuestForProtocolEnabled:(id)arg1;
- (long long)numberOfClientsForProtocols:(id)arg1;
- (BOOL)isNSCProtocolAvailable:(id)arg1;
- (void)setNSCProtocols:(id)arg1 enabled:(BOOL)arg2;
- (void)nscServerCancelShutdown:(id)arg1 refNum:(unsigned int)arg2;
- (BOOL)isNSServerShuttingDown:(id)arg1;
- (unsigned int)nscServerShutdown:(id)arg1 withDelay:(int)arg2;
- (BOOL)isNSCProtocolEnabled:(id)arg1;
- (struct __CFBundle *)_netFSServerFrameworkBundle;
- (void)sendSIGHUPToEfax;
- (BOOL)setInetDServiceEnabled:(id)arg1 enabled:(BOOL)arg2;
- (void)setScreensharingEnabled:(BOOL)arg1;
- (BOOL)screensharingEnabled;
- (void)setOpticalDiscSharingEnabled:(BOOL)arg1;
- (BOOL)isOpticalDiscSharingEnabled;
- (void)saveNatPrefs:(id)arg1;
- (void)setInternetSharingEnabled:(BOOL)arg1;
- (BOOL)internetSharingEnabled;
- (BOOL)isHttpdAvailable;
- (void)setHttpdEnabled:(BOOL)arg1;
- (BOOL)httpdEnabled;
- (BOOL)isFaxReceiveAvailable;
- (void)setFaxReceiveEnabled:(BOOL)arg1;
- (BOOL)faxReceiveEnabled;
- (BOOL)isRemoteAEServerAvailable;
- (void)setRemoteAEServerEnabled:(BOOL)arg1;
- (BOOL)remoteAEServerEnabled;
- (BOOL)isSSHServerAvailable;
- (void)setSSHServerEnabled:(BOOL)arg1;
- (BOOL)sshServerEnabled;
- (BOOL)isFTPServerAvailable;
- (void)setFTPServerEnabled:(BOOL)arg1;
- (BOOL)ftpServerEnabled;

@end

@interface AdminAuthenticator : NSObject
{
    BOOL _syncWaitDone;
}

+ (id)sharedAuthenticator;
- (BOOL)isAuthenticated;
- (BOOL)authenticateUsingAuthorizationSync:(id)arg1;
- (void)deauthenticate;
- (void)authenticateUsingAuthorization:(id)arg1;
- (void)finalize;
- (void)dealloc;
- (void)_toolStartedNotification:(id)arg1;

@end

@interface ADM_NVRAMConfig : NSObject
{
}

+ (id)sharedNVRAMConfig;
- (BOOL)write:(id)arg1 withAuthorization:(id)arg2;
- (void)setStartupFromNetBootImage:(id)arg1;
- (void)setStartupFromNetBootImage:(id)arg1 reportSuccessTo:(id)arg2;
- (void)lookForNetBootServersAndReportTo:(id)arg1;
- (void)write:(id)arg1;

@end

@interface ADMDynamicDNSConfig : NSObject
{
}

+ (id)sharedDynamicDNSConfig;
- (void)scWriteHostname:(id)arg1;
- (void)scWriteRegistrationDomains:(id)arg1;
- (void)scWriteBrowseDomains:(id)arg1;

@end

@interface ADMPrinterSharingConfig : NSObject
{
}

+ (id)sharedPrinterSharing;
- (void)setCanSeeNetworkPrinters:(BOOL)arg1;
- (BOOL)canSeeNetworkPrinters;
- (void)setPrinterSharingEnabled:(BOOL)arg1;
- (BOOL)isPrinterSharingOn;

@end

@interface ReadConfigManager : NSObject
{
    BOOL _isStartinUp;
    BOOL _isConnectionUp;
    NSString *_connectionName;
    NSConnection *_connection;
    NSTask *_readconfigTask;
    NSDistantObject *_readconfigProxy;
}

+ (id)sharedManager;
- (void)wakeup:(id)arg1;
- (id)tool;
- (void)disconnect;
- (void)connect;
- (BOOL)isConnected;
- (void)finalize;
- (void)dealloc;

@end

@interface AdminDSAuthenticator : AdminAuthenticator
{
}

+ (id)sharedDSAuthenticator;
- (BOOL)authenticateUsingAuthorizationSync:(id)arg1;
- (void)deauthenticate;
- (void)authenticateUsingAuthorization:(id)arg1;
- (void)finalize;
- (void)dealloc;

@end

@interface ADMARDConfig : NSObject
{
}

+ (id)sharedARDConfig;
- (void)writeVNCPassword:(id)arg1;
- (void)setScreenSharingEnabled:(BOOL)arg1;
- (BOOL)isScreenSharingOn;
- (void)setARDEnabled:(BOOL)arg1;
- (BOOL)isARDOn;

@end

@interface ADMSysKeyChainConfig : NSObject
{
}

+ (id)sharedSysKeyChainConfig;
- (void)setRestrictAppInstallations:(BOOL)arg1 allowCaspianIdentifiedApps:(BOOL)arg2;
- (BOOL)FDERevertRequiresRestart:(id)arg1;
- (long long)resetFDERecoveryPassword:(id)arg1 existing:(id)arg2 new:(id)arg3;
- (void)overwriteGatekeeperForURL:(id)arg1 withAuthorization:(id)arg2;
- (void)overwriteGatekeeperForURL:(id)arg1;
- (BOOL)setODSDPassword:(id)arg1 accountName:(id)arg2;
- (int)storeKeyInSystemKeychain:(id)arg1 forUser:(id)arg2 serverURL:(id)arg3 description:(id)arg4;
- (BOOL)storeSystemKeychainPassword:(id)arg1 account:(id)arg2 service:(id)arg3;
- (void)setKeyForDomain:(id)arg1;

@end

@interface MCXPrefObject : NSObject
{
    NSMutableDictionary *mMCXDict;
    NSDictionary *mUnionPolicyKeys;
}

+ (id)objectWithRAWDictionary:(id)arg1;
- (BOOL)hasSettingsForDomains:(id)arg1;
- (void)removeDictionaryForDomains:(id)arg1;
- (void)removeDictionaryForDomain:(id)arg1;
- (void)setDictionary:(id)arg1 forDomain:(id)arg2;
- (id)dictionaryForDomain:(id)arg1;
- (id)objectForKey:(id)arg1 inDomain:(id)arg2;
- (id)MCXRAWDict;
- (void)setMCXRAWDict:(id)arg1;
- (void)setUnionPolicyKeys:(id)arg1;
- (void)dealloc;
- (id)initWithRAWDictionary:(id)arg1;

@end

@interface ADMRemoteUser : ADMUser
{
}

+ (id)remoteUsersAtAddress:(id)arg1 name:(id)arg2 password:(id)arg3 port:(long long)arg4;
- (BOOL)isLocal;
- (BOOL)isAdministrator;
- (id)initWithInfo:(id)arg1 node:(id)arg2 attributes:(id)arg3;

@end

@interface ADMParentalControlsConfig : NSObject
{
}

+ (id)sharedConfig;
- (void)setRemoteListening:(BOOL)arg1;
- (void)updateDSAppsForUser:(id)arg1 bundleIDs:(id)arg2 kickMCX:(BOOL)arg3;

@end

@interface DOAsyncResult : NSObject <DOAsyncResultProtocol>
{
    BOOL mDone;
    long long mResult;
    CDUnknownBlockType mCompletionBlock;
    void *mContext;
}

@property(readonly) void *context; // @synthesize context=mContext;
@property(readonly) long long result; // @synthesize result=mResult;
@property(readonly) BOOL done; // @synthesize done=mDone;
- (void)waitForResult;
- (oneway void)setDoneWithResult:(long long)arg1;
- (void)dealloc;
- (id)init;
- (id)initWithBlock:(CDUnknownBlockType)arg1 context:(void *)arg2;

@end

@interface ADMAutoLoginController : NSObject
{
    NSWindow *mAutologinSheet;
    NSPopUpButton *mAutologinSheetPopUp;
    NSSecureTextField *mAutologinSheetPassword;
    NSTextField *mAutologinNameSingle;
    BOOL mNIBIsLoaded;
    ADMLoginPrefs *mLoginPrefs;
}

+ (id)sharedAutoLoginController;
- (void)autologinSheetCancel:(id)arg1;
- (void)autologinSheetOk:(id)arg1;
- (void)showAutologinSheetModalForWindow:(id)arg1 modalDelegate:(id)arg2 didEndSelector:(SEL)arg3 selectUserName:(id)arg4;

@end

@interface ADMGuestUserConfig : NSObject
{
    NSImage *mDefaultGuestPicture;
}

+ (void)syncGuestState;
+ (long long)guestMode;
+ (BOOL)isGuestEnabled;
+ (void)setGuestEnabled:(BOOL)arg1;
+ (id)sharedConfig;
- (id)guestUserPicture;
- (id)_imageFromCGImage1x:(struct CGImage *)arg1 andCGImage2x:(struct CGImage *)arg2;
- (BOOL)isGuestAccountEnabled;
- (void)setGuestAccountEnabled:(BOOL)arg1;
- (id)createGuestAccount;
- (id)findGuestAccount;
- (void)dealloc;
- (id)init;
- (id)_generateGuestPassword;

@end

@interface WriteConfigOnewayMessageDispatcher : NSObject
{
}

- (void)forwardInvocation:(id)arg1;
- (id)methodSignatureForSelector:(SEL)arg1;

@end

@interface WriteConfigClient : NSObject
{
    SFAuthorization *_authorization;
    NSXPCConnection *_connection;
    WriteConfigOnewayMessageDispatcher *_onewayMessageDispatcher;
}

+ (id)sharedClient;
@property(readonly) NSXPCConnection *connection; // @synthesize connection=_connection;
@property(readonly) SFAuthorization *authorization; // @synthesize authorization=_authorization;
- (void)runBlockSync:(CDUnknownBlockType)arg1;
@property(readonly) NSData *authorizationData; // @dynamic authorizationData;
- (void)addBarrierBlock:(CDUnknownBlockType)arg1;
- (id)syncProxyWithSemaphore:(struct dispatch_semaphore_s *)arg1;
@property(readonly) id <XPCWriteConfigProtocol> remoteProxy; // @dynamic remoteProxy;
- (void)disconnect;
- (BOOL)isAuthenticated;
- (BOOL)authenticateUsingAuthorizationSync:(id)arg1;
- (void)authenticateUsingAuthorization:(id)arg1;
- (void)dealloc;
- (void)_connectionDidInvalidate;

@end

@interface NSDictionary (cXMLDataConvertor)
+ (id)dictionaryFromXMLString:(id)arg1;
- (id)XMLString;
@end

@interface SFAuthorization (SFAuthorization_SystemAdministration)
- (id)ADMExternalForm;
@end

